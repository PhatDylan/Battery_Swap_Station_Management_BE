// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Entities.Battery", b =>
                {
                    b.Property<string>("BatteryId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("battery_id");

                    b.Property<string>("BatteryTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("battery_type_id");

                    b.Property<string>("CapacityWh")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("capacity_wh");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_url");

                    b.Property<int>("Owner")
                        .HasColumnType("int")
                        .HasColumnName("owner");

                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("reservation_id");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("serial_no");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("Voltage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("voltage");

                    b.HasKey("BatteryId");

                    b.HasIndex("BatteryTypeId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SerialNo")
                        .IsUnique();

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("Battery");
                });

            modelBuilder.Entity("BusinessObject.Entities.BatterySwap", b =>
                {
                    b.Property<string>("SwapId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("swap_id");

                    b.Property<string>("BatteryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("battery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_id");

                    b.Property<string>("StationId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StationStaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_staff_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime>("SwappedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("swapped_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("vehicle_id");

                    b.HasKey("SwapId");

                    b.HasIndex("BatteryId");

                    b.HasIndex("StationId");

                    b.HasIndex("StationId1");

                    b.HasIndex("StationStaffId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("VehicleId");

                    b.ToTable("BatterySwap");
                });

            modelBuilder.Entity("BusinessObject.Entities.BatteryType", b =>
                {
                    b.Property<string>("BatteryTypeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("battery_type_id");

                    b.Property<string>("BatteryTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("battery_type_name");

                    b.HasKey("BatteryTypeId");

                    b.ToTable("BatteryType");

                    b.HasData(
                        new
                        {
                            BatteryTypeId = "type-001",
                            BatteryTypeName = "Standard Li-ion"
                        },
                        new
                        {
                            BatteryTypeId = "type-002",
                            BatteryTypeName = "High Capacity Li-ion"
                        },
                        new
                        {
                            BatteryTypeId = "type-003",
                            BatteryTypeName = "Fast Charge Li-ion"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.Booking", b =>
                {
                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_id");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("vehicle_id");

                    b.Property<string>("BatteryId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("battery_id");

                    b.Property<string>("BatteryTypeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("battery_type_id");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("booking_date");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("CompleteAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("complete_at");

                    b.Property<string>("ConfirmBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("confirm_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<TimeSpan>("TimeSlot")
                        .HasColumnType("time")
                        .HasColumnName("time_slot");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("StationId", "UserId", "VehicleId", "BatteryId", "BatteryTypeId");

                    b.HasIndex("BatteryId");

                    b.HasIndex("BatteryTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("BusinessObject.Entities.Payment", b =>
                {
                    b.Property<string>("PayId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("pay_id");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<string>("BatterySwapSwapId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("currency");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("order_code");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("payment_method");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("SwapId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("swap_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("PayId");

                    b.HasIndex("BatterySwapSwapId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BusinessObject.Entities.Reservation", b =>
                {
                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("reservation_id");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expired_at");

                    b.Property<DateTime>("ReservedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reserved_at");

                    b.Property<string>("StationInventoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_inventory_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("ReservationId");

                    b.HasIndex("StationInventoryId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("BusinessObject.Entities.Review", b =>
                {
                    b.Property<string>("ReviewId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BusinessObject.Entities.Station", b =>
                {
                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<int>("MaximumSlot")
                        .HasColumnType("int")
                        .HasColumnName("maximum_slot");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("BusinessObject.Entities.StationInventory", b =>
                {
                    b.Property<string>("StationInventoryId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_inventory_id");

                    b.Property<string>("ChargingCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("charging_count");

                    b.Property<string>("FullCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_count");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_update");

                    b.Property<string>("MaintenanceCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("maintenance_count");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_id");

                    b.HasKey("StationInventoryId");

                    b.HasIndex("StationId");

                    b.ToTable("StationInventory");
                });

            modelBuilder.Entity("BusinessObject.Entities.StationStaff", b =>
                {
                    b.Property<string>("StationStaffId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_staff_id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("assigned_at");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("StationStaffId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("StationStaff");
                });

            modelBuilder.Entity("BusinessObject.Entities.Subscription", b =>
                {
                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<int>("NumberOfSwaps")
                        .HasColumnType("int")
                        .HasColumnName("number_of_swaps");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("plan_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("SubscriptionPlanPlanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("SubscriptionPlanPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("BusinessObject.Entities.SubscriptionPayment", b =>
                {
                    b.Property<string>("SubPayId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("sub_pay_id");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("currency");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("order_code");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("payment_method");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("subscription_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubPayId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("SubscriptionPayment");
                });

            modelBuilder.Entity("BusinessObject.Entities.SubscriptionPlan", b =>
                {
                    b.Property<string>("PlanId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("plan_id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<double>("MonthlyFee")
                        .HasColumnType("float")
                        .HasColumnName("monthly_fee");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("SwapsIncluded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("swaps_included");

                    b.HasKey("PlanId");

                    b.ToTable("SubscriptionPlan");

                    b.HasData(
                        new
                        {
                            PlanId = "plan-001",
                            Active = true,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Basic battery swap plan",
                            MonthlyFee = 199000.0,
                            Name = "Basic Plan",
                            SwapsIncluded = "10"
                        },
                        new
                        {
                            PlanId = "plan-002",
                            Active = true,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Premium battery swap plan",
                            MonthlyFee = 399000.0,
                            Name = "Premium Plan",
                            SwapsIncluded = "25"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.SupportTicket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("message");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("station_id");

                    b.Property<string>("StationId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("subject");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("StationId");

                    b.HasIndex("StationId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("SupportTicket");
                });

            modelBuilder.Entity("BusinessObject.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = "admin-001",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@evdriver.com",
                            FullName = "System Administrator",
                            Password = "$2a$11$pDMVBuBf.cieLNUB/aCT1.FYbxwR/wEcQz22Qgl6r.SXBdq2zBxSO",
                            Phone = "0123456789",
                            Role = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.Vehicle", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("vehicles_id");

                    b.Property<string>("BatteryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("battery_id");

                    b.Property<string>("BatteryId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BatteryTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("battery_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("license_plate");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("model");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("VBrand")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("v_brand");

                    b.HasKey("VehicleId");

                    b.HasIndex("BatteryId");

                    b.HasIndex("BatteryId1");

                    b.HasIndex("BatteryTypeId");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("BusinessObject.Entities.Battery", b =>
                {
                    b.HasOne("BusinessObject.Entities.BatteryType", "BatteryType")
                        .WithMany("Batteries")
                        .HasForeignKey("BatteryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Reservation", "Reservation")
                        .WithMany("Batteries")
                        .HasForeignKey("ReservationId");

                    b.HasOne("BusinessObject.Entities.Station", "Station")
                        .WithMany("Batteries")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Batteries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatteryType");

                    b.Navigation("Reservation");

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.BatterySwap", b =>
                {
                    b.HasOne("BusinessObject.Entities.Battery", "Battery")
                        .WithMany("BatterySwaps")
                        .HasForeignKey("BatteryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Station", null)
                        .WithMany("BatterySwaps")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.StationStaff", "StationStaff")
                        .WithMany("BatterySwaps")
                        .HasForeignKey("StationStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", null)
                        .WithMany("BatterySwaps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Vehicle", "Vehicle")
                        .WithMany("BatterySwaps")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battery");

                    b.Navigation("Station");

                    b.Navigation("StationStaff");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusinessObject.Entities.Booking", b =>
                {
                    b.HasOne("BusinessObject.Entities.Battery", "Battery")
                        .WithMany("Bookings")
                        .HasForeignKey("BatteryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.BatteryType", "BatteryType")
                        .WithMany("Bookings")
                        .HasForeignKey("BatteryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Station", "Station")
                        .WithMany("Bookings")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battery");

                    b.Navigation("BatteryType");

                    b.Navigation("Station");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusinessObject.Entities.Payment", b =>
                {
                    b.HasOne("BusinessObject.Entities.BatterySwap", "BatterySwap")
                        .WithMany("Payments")
                        .HasForeignKey("BatterySwapSwapId");

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatterySwap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Reservation", b =>
                {
                    b.HasOne("BusinessObject.Entities.StationInventory", "StationInventory")
                        .WithMany("Reservations")
                        .HasForeignKey("StationInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StationInventory");
                });

            modelBuilder.Entity("BusinessObject.Entities.Review", b =>
                {
                    b.HasOne("BusinessObject.Entities.Station", "Station")
                        .WithMany("Reviews")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Station", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Stations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.StationInventory", b =>
                {
                    b.HasOne("BusinessObject.Entities.Station", "Station")
                        .WithMany("StationInventories")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("BusinessObject.Entities.StationStaff", b =>
                {
                    b.HasOne("BusinessObject.Entities.Station", "Station")
                        .WithMany("StationStaffs")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("StationStaffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Subscription", b =>
                {
                    b.HasOne("BusinessObject.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPlanPlanId");

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.SubscriptionPayment", b =>
                {
                    b.HasOne("BusinessObject.Entities.Subscription", "Subscription")
                        .WithMany("SubscriptionPayments")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", null)
                        .WithMany("SubscriptionPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.SupportTicket", b =>
                {
                    b.HasOne("BusinessObject.Entities.Station", null)
                        .WithMany("SupportTickets")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObject.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId1");

                    b.HasOne("BusinessObject.Entities.User", null)
                        .WithMany("SupportTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Vehicle", b =>
                {
                    b.HasOne("BusinessObject.Entities.Battery", null)
                        .WithMany()
                        .HasForeignKey("BatteryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Battery", "Battery")
                        .WithMany("Vehicles")
                        .HasForeignKey("BatteryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.BatteryType", "BatteryType")
                        .WithMany("Vehicles")
                        .HasForeignKey("BatteryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battery");

                    b.Navigation("BatteryType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Battery", b =>
                {
                    b.Navigation("BatterySwaps");

                    b.Navigation("Bookings");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("BusinessObject.Entities.BatterySwap", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BusinessObject.Entities.BatteryType", b =>
                {
                    b.Navigation("Batteries");

                    b.Navigation("Bookings");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("BusinessObject.Entities.Reservation", b =>
                {
                    b.Navigation("Batteries");
                });

            modelBuilder.Entity("BusinessObject.Entities.Station", b =>
                {
                    b.Navigation("Batteries");

                    b.Navigation("BatterySwaps");

                    b.Navigation("Bookings");

                    b.Navigation("Reviews");

                    b.Navigation("StationInventories");

                    b.Navigation("StationStaffs");

                    b.Navigation("SupportTickets");
                });

            modelBuilder.Entity("BusinessObject.Entities.StationInventory", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BusinessObject.Entities.StationStaff", b =>
                {
                    b.Navigation("BatterySwaps");
                });

            modelBuilder.Entity("BusinessObject.Entities.Subscription", b =>
                {
                    b.Navigation("SubscriptionPayments");
                });

            modelBuilder.Entity("BusinessObject.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("BusinessObject.Entities.User", b =>
                {
                    b.Navigation("Batteries");

                    b.Navigation("BatterySwaps");

                    b.Navigation("Bookings");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");

                    b.Navigation("StationStaffs");

                    b.Navigation("Stations");

                    b.Navigation("SubscriptionPayments");

                    b.Navigation("Subscriptions");

                    b.Navigation("SupportTickets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("BusinessObject.Entities.Vehicle", b =>
                {
                    b.Navigation("BatterySwaps");

                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
